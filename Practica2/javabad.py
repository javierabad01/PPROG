"""Abad Hernández Javier
Castro García Jaime
Grugo T3, Grupo de practicas Y8"""


#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.9.5 on Sat May 23 18:47:24 2020
#

import wx
import random
import copy


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MiVentana(wx.Frame):
    movimiento = 0
    label_movs = None
    label_punts = None
    sizer_2 = None
    grid_sizer_1=None
    dimension=0
    numeros=[]
    hay_tablero=False
    matriz=[]
    modo=None
    num_alfabeto={}
    puntos='0'
    vacias='0'
    final=None
    puntuacion=0
    puntos=0
    espacios_vacios=0
    mostrar_ganador=None


    def crea_matriz(self):
        self.matriz = []
        for i in range(self.dimension):
            self.matriz.append([])
            for j in range(self.dimension):
                self.matriz[i].append('')


    def pinta_tablero(self):
        for i in range(self.dimension):
            for j in range(self.dimension):
                if self.matriz[i][j] != "" and self.matriz[i][j] != "****":
                    valor = [key for key, value in self.num_alfabeto.items() if
                             value == self.matriz[i][j]]  
                    asignar = valor[0]
                    self.matriz[i][j] = self.num_actual[asignar]
                    self.numeros[i*self.dimension+j].SetLabel(str(self.matriz[i][j]))
        self.ganador()

    """ Función que se encargaraa de introducir o el primer o el segundo elemento del diccionario a la matriz, 
    dependiendo de si encuentra obstaculo o 0's en la matriz. Si no encuentra obstaculos, imprimirá con un 25% 
    de posibilidades el segundo elemento del diccionario y con un 75% el primer elemento del diccionario.
    """

    def nuevo_elemento(self):
        num_aleat = random.randrange(100)
        hay_obstaculo = True
        self.espacios_vacios=self.casillas_vacias()
        
        while hay_obstaculo:
            posx_aleat = random.randrange(0, self.dimension)
            posy_aleat = random.randrange(0, self.dimension)
            if self.matriz[posx_aleat][posy_aleat]!='****':
                hay_obstaculo=True
            if self.matriz[posx_aleat][posy_aleat] == '' and hay_obstaculo==True:
                if num_aleat < 75:
                    nuevo_elemento = self.num_alfabeto[1]
                else:
                    nuevo_elemento = self.num_alfabeto[2]
                self.matriz[posx_aleat][posy_aleat] = nuevo_elemento
                hay_obstaculo = False

    """
    Función que se encarga de imprimir en la matriz obstaculos de manera random comprobando antes siempre si hay ya otro 
    obstaculo en esa posición.
    """
    def crear_obstaculo(self):
        obstaculos=self.obstaculos
        for a in range(obstaculos):
            existe = True
            while existe:
                posx_aleat = random.randrange(0, self.dimension)
                posy_aleat = random.randrange(0, self.dimension)
                if self.matriz[posx_aleat][posy_aleat] == "****":
                    existe = True
                else:
                    self.matriz[posx_aleat][posy_aleat] = "****"
                    existe = False


    def crea_tablero(self):
        self.sizer_2.SetMinSize(800,400)
        self.grid_sizer_1 = wx.GridSizer(self.dimension, self.dimension, 0, 0)
        for fila in range (self.dimension):
            for elemento in range (self.dimension):
                etiqueta=wx.StaticText(self, wx.ID_ANY, str(self.matriz[fila][elemento]), style=wx.ALIGN_CENTER)
                self.font = wx.Font(18, wx.DECORATIVE, wx.NORMAL, wx.NORMAL)
                etiqueta.SetFont(self.font)
                self.numeros.append(etiqueta)
                self.grid_sizer_1.Add(etiqueta, 0, wx.ALIGN_CENTER, 0)

        self.hay_tablero = True
        self.sizer_2.Add(self.grid_sizer_1, 1, wx.EXPAND, 0)

        self.Layout()
        self.Fit()


    def destruye_tablero(self):
        self.sizer_2.Remove(self.grid_sizer_1)
        for etiqueta in range (len(self.numeros)):
            self.numeros[etiqueta].Destroy()
    
        self.hay_tablero = False
        self.numeros=[]

    """Función que se encarga de realizar los movimientos, y la fusion de los elementos del diccionario, hacia la derecha.
    Comprobando primero si hay fusión disponible y si no hay obstaculo"""
    def movimiento_derecha(self):
        for i in range(len(self.matriz)):
            mezclas = []
            for x in range(len(self.matriz) - 1):
                for j in range(-2, -len(self.matriz) - 1, -1):

                    if self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i][j + 1] == '':
                        self.matriz[i][j + 1] = self.matriz[i][j]
                        self.matriz[i][j] = ''


                    elif self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i][j] == self.matriz[i][
                        j + 1] and j not in mezclas and j - 1 not in mezclas:
                        valor=self.matriz[i][j+1]
                        lista=list(self.num_alfabeto.values())
                        posicion=lista.index(valor)
                        self.matriz[i][j + 1] = self.num_alfabeto[posicion+2] #se suma 1, por como esta estructurado el diccionario
                        valor_num = self.matriz[i][j + 1]
                        lista = list(self.num_alfabeto.values())
                        self.puntos = lista.index(valor_num) + 1
                        self.aum_puntos()
                        self.matriz[i][j] = ''
                        mezclas.append(j)


    """Función que se encarga de realizar los movimientos, y la fusion de los elementos del diccionario, hacia la izquierda.
    Comprobando primero si hay fusión disponible y si no hay obstaculo"""
    def movimiento_izquierda(self):
        for i in range(len(self.matriz)):
            mezclas = []
            for x in range(len(self.matriz) - 1):
                for j in range(1, len(self.matriz)):
                    if self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i][j - 1] == '':
                        self.matriz[i][j - 1] = self.matriz[i][j]
                        self.matriz[i][j] = ''

                    elif self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i][j] == self.matriz[i][
                        j - 1] and j not in mezclas and j + 1 not in mezclas:
                        valor=self.matriz[i][j-1]
                        lista=list(self.num_alfabeto.values())
                        posicion=lista.index(valor)
                        self.matriz[i][j - 1] = self.num_alfabeto[posicion+2] #se suma 1, por como esta estructurado el diccionario
                        valor_num = self.matriz[i][j - 1]
                        lista = list(self.num_alfabeto.values())
                        self.puntos = lista.index(valor_num) + 1
                        self.aum_puntos()
                        self.matriz[i][j] = ''
                        mezclas.append(j)


    """Función que se encarga de realizar los movimientos, y la fusion de los elementos del diccionario, hacia la abajo.
    Comprobando primero si hay fusión disponible y si no hay obstaculo"""
    def movimiento_abajo(self):
        for j in range(len(self.matriz)):
            mezclas = []
            for x in range(len(self.matriz) - 1):
                for i in range(-2, -len(self.matriz) - 1, -1):
                    if self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i + 1][j] == '':
                        self.matriz[i + 1][j] = self.matriz[i][j]
                        self.matriz[i][j] = ''

                    elif self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i][j] == self.matriz[i + 1][
                        j] and i not in mezclas and i - 1 not in mezclas:
                        valor=self.matriz[i+1][j]
                        lista=list(self.num_alfabeto.values())
                        posicion=lista.index(valor)
                        self.matriz[i+1][j] = self.num_alfabeto[posicion+2] #se suma 1, por como esta estructurado el diccionario
                        valor_num = self.matriz[i + 1][j]
                        lista = list(self.num_alfabeto.values())
                        self.puntos = lista.index(valor_num) + 1
                        self.aum_puntos()
                        self.matriz[i][j] = ''
                        mezclas.append(i)


    """Función que se encarga de realizar los movimientos, y la fusion de los elementos del diccionario, hacia la arriba.
    Comprobando primero si hay fusión disponible y si no hay obstaculo"""
    def movimiento_arriba(self):
        for j in range(len(self.matriz)):
            mezclas = []
            for x in range(len(self.matriz) - 1):
                for i in range(1, len(self.matriz)):
                    if self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i - 1][j] == '':
                        self.matriz[i - 1][j] = self.matriz[i][j]
                        self.matriz[i][j] = ''

                    elif self.matriz[i][j] != "****" and self.matriz[i][j] != '' and self.matriz[i][j] == self.matriz[i - 1][
                        j] and i not in mezclas and i + 1 not in mezclas:
                        valor=self.matriz[i-1][j]
                        lista=list(self.num_alfabeto.values())
                        posicion=lista.index(valor)
                        self.matriz[i-1][j] = self.num_alfabeto[posicion+2] #se suma 1, por como esta estructurado el diccionario
                        valor_num = self.matriz[i - 1][j]
                        lista = list(self.num_alfabeto.values())
                        self.puntos = lista.index(valor_num) + 1
                        self.aum_puntos()
                        self.matriz[i][j] = ''
                        mezclas.append(i)

    """Función que cada vez que hay una fusión suma de puntuación la posición que le corresponda de cada movimiento."""
    def aum_puntos(self):
        self.puntuacion = self.puntuacion + self.puntos
        self.label_punts.SetLabel(str(self.puntuacion))
    
    """Función que se encarga de recorrer toda la matriz, para ver si hay si hay blancos en la matriz, que es lo correspondiente
    a los espacios en blanco del tablero. """
    def casillas_vacias(self):
        self.vacias = []
        for i in range(len(self.matriz)):
            for j in range(len(self.matriz)):
                if self.matriz[i][j] == '':
                    self.vacias.append([i, j])
        return self.vacias
    

    """Función que se encarga de ver si has llegado al elemento correspondiente a la posición 11 y/o -2 del diccionario
    es decir, la correspondiente """
    def ganador(self):
        self.mostrar_ganador = False

        for i in range(len(self.matriz)):
            for j in range (len(self.matriz[0])):
                if self.matriz[i][j]==self.num_alfabeto[11]:
                    self.mostrar_ganador = True
                    wx.MessageBox("HAS GANADO!!", "VICTORIA",
                       wx.OK)
                    self.SetFocus()


    """Función que recorre la matriz y comprueba si quedan movimientos posibles comparando la matriz actual 
    con otra que contenga una posible fusión"""
    def sin_movimientos(self):
        self.final = True
        for i in range(len(self.matriz)):
            for j in range(len(self.matriz)):
                if self.matriz[i][j] == '':
                    self.final = False
                    return self.final

        for i in range(len(self.matriz)):
            for j in range(len(self.matriz) - 1):
                if self.matriz[i][j] == self.matriz[i][j + 1] and self.matriz[i][j] != "****":
                    self.final = False

        for i in range(len(self.matriz) - 1):
            for j in range(len(self.matriz)):
                if self.matriz[i][j] == self.matriz[i + 1][j] and self.matriz[i][j] != "****":
                    self.final = False

        return self.final
    
    """Función que se encarga de guardar en un fichero lo que llevamos hasta el momento en el que se ejecute esta opción
    de juego, con la puntuación, los movimientos y el tablero."""
    def guardar_ficheros(self):
        if self.text_ct_fich.GetValue()=='':
            wx.MessageBox("Introduzca un nombre para guardar el fichero", "Fallo ficheros",
                       wx.OK)
        else:
            nombre = self.text_ct_fich.GetValue()
            archivo_texto = open(nombre, "w")

            archivo_texto.write(str(self.movimiento))
            archivo_texto.write("\n")
            archivo_texto.write(str(self.puntuacion))
            archivo_texto.write("\n")
            matrix=[]
            matrix=copy.deepcopy(self.matriz)

            for i in range(self.dimension):
                for j in range(self.dimension):
                    if self.matriz[i][j] == '':
                        vacio = '.'
                        archivo_texto.write(vacio)
                    elif self.matriz[i][j] == "****":
                        asterisco = "*"
                        archivo_texto.write(asterisco)
                    elif self.matriz[i][j] != '' and self.matriz[i][j] != "****":
                        valor = [key for key, value in self.num_alfabeto.items() if
                                 value == self.matriz[i][j]]  
                        asignar = valor[0]
                        self.matriz[i][j] = self.num_actual[asignar]
                        archivo_texto.write(self.matriz[i][j])
                archivo_texto.write("\n")

            archivo_texto.close()
            self.matriz=matrix

            wx.MessageBox("PARTIDA GUARDADA CON ÉXITO", "BUENA PARTIDA",
                           wx.OK)
            introducir_nuevo_elemento = False
        
    """Función que se encarga de abrir de un fichero lo que llevabamos hasta el momento en el que se guaardo el fichero"""           
    def abrir_ficheros(self):
        obstaculos=0
        fichero = False
        if self.text_ct_fich.GetValue()=='':
            wx.MessageBox("Fichero no especificado, inserte un nombre adecuado", "Fallo ficheros",
                       wx.OK)
        else:
            try:
                nombre = self.text_ct_fich.GetValue()
                archivo_texto = open(nombre, "r")
                lineas_fichero = archivo_texto.readlines()
                fichero = True

            

                self.dimension = lineas_fichero.__len__() - 2
                self.matriz = []
                for i in range(self.dimension):
                    self.matriz.append([])
                    for j in range(self.dimension):
                        self.matriz[i].append('')
                self.movimiento = int(lineas_fichero[0]) #movimientos en la 1º lína del fichero
                self.puntuacion = int(lineas_fichero[1]) #puntuación en la 2º línea del fichero
                
                lista = list(self.num_alfabeto1.values())
                index = 1

                for i in range(self.dimension):
                    index += 1
                    for j in range(self.dimension):
                        if lineas_fichero[index][j] == "*":
                            obstaculos+=1
                            self.matriz[i][j] = "****"
                        if lineas_fichero[index][j] != "*" and lineas_fichero[index][j] != ".":
                            valor = lineas_fichero[index][j]
                            posicion = lista.index(valor)
                            self.matriz[i][j] = str(posicion + 1)

                archivo_texto.close()
                self.label_punts.SetLabel(str(self.puntuacion))
                self.movimiento=self.movimiento-1
                self.movimientos()
                self.num_alfabeto=self.num_alfabeto2
                self.text_ct_dim.SetLabel(str(self.dimension))
                self.text_ct_obs.SetLabel(str(obstaculos))
                self.radbtn_mod2.SetValue(True)
            
            except FileNotFoundError:
                wx.MessageBox("Fichero no encontrado, pruebe con otro", "Confirm",
                       wx.OK)

    def __init__(self, *args, **kwds):
        # begin wxGlade: MiVentana.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((2000, 2000))
        self.frame_statusbar = self.CreateStatusBar(1)
        self.Nuevo = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IMAGENES/Nuevo.PNG", wx.BITMAP_TYPE_ANY))
        self.guardar_fichero = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IMAGENES/Guardar_fichero.PNG", wx.BITMAP_TYPE_ANY))
        self.abrir_fichero = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IMAGENES/Abrir_fichero.PNG", wx.BITMAP_TYPE_ANY))
        self.text_ct_dim = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ct_obs = wx.TextCtrl(self, wx.ID_ANY, "")
        self.radbtn_mod4 = wx.RadioButton(self, wx.ID_ANY, "2048")
        self.radbtn_mod3 = wx.RadioButton(self, wx.ID_ANY, "1024")
        self.radbtn_mod1 = wx.RadioButton(self, wx.ID_ANY, "Alfabetico")
        self.radbtn_mod2 = wx.RadioButton(self, wx.ID_ANY, "Numerico")
        self.text_ct_fich = wx.TextCtrl(self, wx.ID_ANY, "")
        self.new_obs = wx.Button(self, wx.ID_ANY, "Nuevo obstaculo")

        
        self.num_alfabeto1 = {1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F', 7: 'G', 8: 'H', 9: 'I',
                            10: 'J', 11: 'K', 12: 'L'}
            

        self.num_alfabeto2 = {1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9',
                            10: '10', 11: '11', 12: '12'}
            


        self.num_alfabeto3 = {1: '1', 2: '2', 3: '4', 4: '8', 5: '16', 6: '32', 7: '64', 8: '128',
                            9: '256', 10: '512', 11: '1024', 12: '2048'}
            

        self.num_alfabeto4 = {1: '2', 2: '4', 3: '8', 4: '16', 5: '32', 6: '64', 7: '128', 8: '256',
                            9: '512', 10: '1024', 11: '2048', 12: '4096'}

        self.num_alfabeto=self.num_alfabeto1
        self.num_actual = self.num_alfabeto1
 

        self.__set_properties()
        self.__do_layout()

        #self.Bind(wx.EVT_TEXT, self.onDimension, self.text_ct_dim)
        self.Bind(wx.EVT_KEY_DOWN, self.on_key)
        self.Bind(wx.EVT_RADIOBUTTON,self.onModo4, self.radbtn_mod4)
        self.Bind(wx.EVT_RADIOBUTTON,self.onModo3, self.radbtn_mod3)
        self.Bind(wx.EVT_RADIOBUTTON,self.onModo1, self.radbtn_mod1)
        self.Bind(wx.EVT_RADIOBUTTON,self.onModo2, self.radbtn_mod2)
        self.Bind(wx.EVT_BUTTON, self.on_newObs, self.new_obs)
        self.Bind(wx.EVT_BUTTON, self.onAbrir, self.abrir_fichero)
        self.Bind(wx.EVT_BUTTON, self.onGuardar, self.guardar_fichero)
        self.Bind(wx.EVT_BUTTON, self.onNuevo, self.Nuevo)
        
        # end wxGlade
        self.Fit()

    def __set_properties(self):
        # begin wxGlade: MiVentana.__set_properties
        self.SetTitle("CLON-4")
        self.SetBackgroundColour(wx.Colour(245, 245, 245))
        self.frame_statusbar.SetStatusWidths([-1])

        self.Nuevo.SetMinSize((37, 37))
        self.guardar_fichero.SetMinSize((37, 37))
        self.abrir_fichero.SetMinSize((37, 37))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MiVentana.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        self.grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        Modo = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Modo"), wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.Nuevo, 2, 0, 0)
        sizer_4.Add(self.guardar_fichero, 2, 0, 0)
        sizer_4.Add(self.abrir_fichero, 2, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        dimension = wx.StaticText(self, wx.ID_ANY, "Dimension:", style=wx.ALIGN_CENTER)
        sizer_8.Add(dimension, 0, wx.ALIGN_CENTER, 0)
        sizer_8.Add(self.text_ct_dim, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_8, 1, wx.EXPAND, 0)
        label_obs = wx.StaticText(self, wx.ID_ANY, u"Obstaculos:")
        sizer_9.Add(label_obs, 0, wx.EXPAND, 0)
        sizer_9.Add(self.text_ct_obs, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_9, 1, wx.EXPAND, 0)
        Modo.Add(self.radbtn_mod4, 0, wx.EXPAND, 0)
        Modo.Add(self.radbtn_mod3, 0, wx.EXPAND, 0)
        Modo.Add(self.radbtn_mod1, 0, wx.EXPAND, 0)
        Modo.Add(self.radbtn_mod2, 0, wx.EXPAND, 0)
        sizer_5.Add(Modo, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)
        label_fich = wx.StaticText(self, wx.ID_ANY, "Nombre del fichero")
        sizer_13.Add(label_fich, 0, 0, 0)
        sizer_13.Add(self.text_ct_fich, 0, 0, 0)
        sizer_3.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_7.Add(self.new_obs, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_7, 4, wx.EXPAND, 0)
        MOVS = wx.StaticText(self, wx.ID_ANY, "MOVS:")
        sizer_10.Add(MOVS, 0, 0, 0)
        self.label_movs = wx.StaticText(self, wx.ID_ANY, "0")
        sizer_10.Add(self.label_movs, 0, 0, 0)
        sizer_6.Add(sizer_10, 1, wx.EXPAND, 0)
        PTOS = wx.StaticText(self, wx.ID_ANY, "PTOS:")
        sizer_11.Add(PTOS, 0, 0, 0)
        self.label_punts = wx.StaticText(self, wx.ID_ANY, str(self.puntos))
        sizer_11.Add(self.label_punts, 0, 0, 0)
        sizer_6.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_6, 1, wx.EXPAND, 0)
        self.sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)
       
        sizer_1.Add(self.sizer_2, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.SetSizeHints(self)
        self.Layout()
        self.Centre()
        # end wxGlade
    
    """Funcion que es llamada tras pulsar el botón Nuevo y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onNuevo(self, event):  # wxGlade: MiVentana.<event_handler>
        if self.text_ct_dim.GetValue()=='':
            wx.MessageBox("ERROR, Inserte dimension", "ERROR DIMENSION",wx.OK)
        if self.text_ct_obs.GetValue()=='':
                self.text_ct_obs.SetValue(str(0))
        elif int(self.text_ct_obs.GetValue()) >= int(self.text_ct_dim.GetValue())*int(self.text_ct_dim.GetValue())-1:   #control de cantidad de obstaculos
             wx.MessageBox("NO PUEDE INSERTAR TANTOS OBSTACULOS", "ERROR DIMENSION",wx.OK)
       
        else:
            wx.MessageBox("Para los movimientos usa las flechas del teclado", "MOVIMIENTOS",wx.OK)
            if self.text_ct_obs.GetValue()=='':     #espacio en obstaculos = "0" obstaculos
                self.text_ct_obs.SetValue(str(0))
            self.radbtn_mod1.SetValue(True)
            self.dimension=int(self.text_ct_dim.GetValue())
            self.obstaculos=int(self.text_ct_obs.GetValue())
            self.crea_matriz()
            self.crear_obstaculo()
            self.nuevo_elemento()

            if self.hay_tablero == False:
                self.crea_tablero()
            else:
                self.destruye_tablero()
                self.crea_tablero()
            self.SetFocus()
            event.Skip()

    """Funcion que es llamada tras pulsar el botón Arriba o la tecla hacia arriba y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onArriba(self, event):  # wxGlade: MiVentana.<event_handler>
        print("Desplazamiento arriba")
        self.sin_movimientos()
        self.casillas_vacias()
        if len(self.casillas_vacias()) == 0 and self.sin_movimientos() == True:
            wx.MessageBox("HAS PERDIDO!!\nSi desea volver a jugar cree un nuevo juego \no abra un nuevo fichero", "SIGUE INTENTANDOLO",
                       wx.OK)
        else:
            self.movimiento_arriba()
            if len(self.casillas_vacias()) != 0:
                self.nuevo_elemento()
                self.movimientos()
            self.destruye_tablero()
            self.crea_tablero()
            self.pinta_tablero()
        event.Skip()

    """Funcion que es llamada tras pulsar el botón Abajo o la tebla hacia abajo y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onAbajo(self, event):  # wxGlade: MiVentana.<event_handler>
        print("Desplazamiento abajo")
        self.sin_movimientos()
        self.casillas_vacias()
        if len(self.casillas_vacias()) == 0 and self.sin_movimientos() == True:
            wx.MessageBox("HAS PERDIDO!!\nSi desea volver a jugar cree un nuevo juego \no abra un nuevo fichero", "SIGUE INTENTANDOLO",
                       wx.OK)
        else:
            self.movimiento_abajo()
            if len(self.casillas_vacias()) != 0: 
                self.nuevo_elemento()
                self.movimientos()
            self.destruye_tablero()
            self.crea_tablero()
            self.pinta_tablero()
        event.Skip()

    """Funcion que es llamada tras pulsar el botón Derecha o flecha derecha y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onDerecha(self, event):  # wxGlade: MiVentana.<event_handler>
        print("Desplazamiento derecha")
        self.sin_movimientos()
        self.casillas_vacias()
        if len(self.casillas_vacias()) == 0 and self.sin_movimientos() == True:
            wx.MessageBox("HAS PERDIDO!!\nSi desea volver a jugar cree un nuevo juego \no abra un nuevo fichero", "SIGUE INTENTANDOLO",
                       wx.OK)
        else:
            self.movimiento_derecha()
            if len(self.casillas_vacias()) != 0:
                self.nuevo_elemento()
                self.movimientos()
            self.destruye_tablero()
            self.crea_tablero()
            self.pinta_tablero()
        event.Skip()

    """Funcion que es llamada tras pulsar el botón Izquierda o tecla izquierda y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onIzquierda(self, event):  # wxGlade: MiVentana.<event_handler>
        print("Deplazamiento izquierda")
        self.sin_movimientos()
        self.casillas_vacias()
        if len(self.casillas_vacias()) == 0 and self.sin_movimientos() == True:
            wx.MessageBox("HAS PERDIDO!!\nSi desea volver a jugar cree un nuevo juego \no abra un nuevo fichero", "SIGUE INTENTANDOLO",
                       wx.OK)
        else:
            self.movimiento_izquierda()
            if len(self.casillas_vacias()) != 0:
                self.nuevo_elemento()
                self.movimientos()
            self.destruye_tablero()
            self.crea_tablero()
            self.pinta_tablero()
        event.Skip()
        
    """Funcion que es llamada tras pulsar el correspondiente modo y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onModo4(self,event):
        self.pinta_tablero()
        self.num_actual = self.num_alfabeto4
        self.pinta_tablero()
        self.num_alfabeto=self.num_alfabeto4
        self.SetFocus()
        
        
    """Funcion que es llamada tras pulsar el correspondiente modo y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""    
    def onModo3(self,event): 
        self.pinta_tablero()   
        self.num_actual = self.num_alfabeto3
        self.pinta_tablero()
        self.num_alfabeto=self.num_alfabeto3
        self.SetFocus()


    """Funcion que es llamada tras pulsar el correspondiente modo y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onModo1(self,event):
        self.pinta_tablero()
        self.num_actual = self.num_alfabeto1
        self.pinta_tablero()
        self.num_alfabeto=self.num_alfabeto1
        self.SetFocus()
        
    """Funcion que es llamada tras pulsar el correspondiente modo y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onModo2(self,event):
        self.pinta_tablero()
        self.num_actual = self.num_alfabeto2
        self.pinta_tablero()
        self.num_alfabeto=self.num_alfabeto2
        self.SetFocus()
        
    """Funcion que es llamada tras pulsar el boton de guardar fichero y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onGuardar(self, event):
        self.num_actual = self.num_alfabeto1
        self.guardar_ficheros()
        self.num_actual = self.num_alfabeto
        self.pinta_tablero()
        self.num_alfabeto=self.num_alfabeto
        self.SetFocus()

    """Funcion que es llamada tras pulsar el boton de abrir fichero y se encarga de hacer las pertinentes operaciones 
    para mostrarse bien en la version gráfica"""
    def onAbrir(self,event):
        self.crea_matriz()
        self.crea_tablero()
        self.destruye_tablero()
        self.crea_tablero()
        self.abrir_ficheros()
        self.destruye_tablero()
        self.crea_tablero()
        self.num_actual=self.num_alfabeto2
        self.pinta_tablero()
        self.num_alfabeto=self.num_alfabeto2
        self.SetFocus()

    """Funcion que se encarga de asignar a los eventos de movimiento una tecla"""
    def on_key(self, event):
        "Aumentamos el contador de movimientos y obtenemos el movimiento seleccionado"
        #Repito en todos lo mismo porque si lo pongo solamente al final, se realiza pulsando cualquier tecla.
        key_code = event.GetKeyCode()
        if key_code == wx.WXK_UP:
            self.onArriba(event)
        elif key_code == wx.WXK_DOWN:
            self.onAbajo(event)
        elif key_code == wx.WXK_LEFT:
            self.onIzquierda(event)
        elif key_code == wx.WXK_RIGHT:
            self.onDerecha(event)
        event.Skip()
    
    def on_newObs(self, event):  # wxGlade: MiVentana.<event_handler>
        print("Nuevo obstáculo aleatorio.")
        self.sin_movimientos()
        self.casillas_vacias()
        self.obstaculos+=1

        obstaculos=1
        if len(self.casillas_vacias()) == 0 and self.sin_movimientos() == True:
            wx.MessageBox("HAS PERDIDO!!\nSi desea volver a jugar cree un nuevo juego \no abra un nuevo fichero", "SIGUE INTENTANDOLO",
                       wx.OK)
        else:
            self.text_ct_obs.SetValue(str(self.obstaculos))
            for a in range(obstaculos):
                existe = True
                while existe:
                    posx_aleat = random.randrange(0, self.dimension)
                    posy_aleat = random.randrange(0, self.dimension)
                    if self.matriz[posx_aleat][posy_aleat] == "****" or self.matriz[posx_aleat][posy_aleat] != '':
                        existe = True
                    else:
                        self.matriz[posx_aleat][posy_aleat] = "****"
                        existe = False
            
            
        self.destruye_tablero()
        self.crea_tablero()
        
        
        event.Skip()

    """Función que se encarga de sumar un movimiento cada vez que se haga uno ya sea con los botones o las teclas"""
    def movimientos(self):
        self.movimiento=self.movimiento+1
        self.label_movs.SetLabel(str(self.movimiento))

   
 
# end of class MiVentana

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MiVentana(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
